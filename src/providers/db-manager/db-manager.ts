import { Injectable } from '@angular/core';
import { SQLite } from '@ionic-native/sqlite';
import { DB_CONFIG} from '../../config/app-constants';

@Injectable()
export class DbManagerProvider {

    constructor(public sqlite: SQLite) {}

    initTables(db){
        db.executeSql('CREATE TABLE IF NOT EXISTS USER_ROLE (ID_ROLE INTEGER PRIMARY KEY, NAME_USER TEXT)', []);
        db.executeSql('CREATE TABLE IF NOT EXISTS WI_ELEMENT_ATTACHMENT (ID_WI_ELEMENT_ATTACHMENT INTEGER PRIMARY KEY, ID_WORK_ITEM_ELEMENT INTEGER,ID_ELEMENT_TYPE_CONFIG_DOC INTEGER,DE_WI_ELEMENT_ATTACHMENT TEXT,VL_FILE_B64 CLOB,FG_SYNCED INTEGER,VL_TYPE TEXT)', []);
        db.executeSql('CREATE TABLE IF NOT EXISTS WORK_ITEM_STATUS (ID_WORK_ITEM_STATUS INTEGER PRIMARY KEY, NM_WORK_ITEM_STATUS TEXT)', []);
        db.executeSql('CREATE TABLE IF NOT EXISTS ETYPE_CONFIG_WI_STATUS (ID_WORK_ITEM_STATUS INTEGER, ID_ELEMENT_TYPE_CONFIG INTEGER,PRIMARY KEY(ID_WORK_ITEM_STATUS,ID_ELEMENT_TYPE_CONFIG))', []);
        db.executeSql('CREATE TABLE IF NOT EXISTS USER_AREA (ID_USER INTEGER, ID_AREA INTEGER, NAME_AREA TEXT,PRIMARY KEY(ID_USER,ID_AREA))', []);
        db.executeSql('CREATE TABLE IF NOT EXISTS ATTRIBUTE (ID_ATTRIBUTE INTEGER, NM_ATTRIBUTE TEXT, CD_ATTRIBUTE TEXT, VL_ATTRIBUTE_SIZE INTEGER, ID_COMBO_CATEGORY INTEGER, ID_ATTRIBUTE_TYPE INTEGER,NM_ATTRIBUTE_TYPE TEXT, VL_ATTRIBUTE_TYPE TEXT, NM_WEB_COMPONENT TEXT, PRIMARY KEY(ID_ATTRIBUTE) )', []);
        db.executeSql('CREATE TABLE IF NOT EXISTS CASES (ID_CASE INTEGER, ID_ELEMENT INTEGER, ID_ELEMENT_TYPE INTEGER, ID_CASE_STATUS INTEGER, NR_CASE INTEGER,FG_SHARED INTEGER,DT_SHARED TEXT,PRIMARY KEY(ID_CASE) )', []);
        db.executeSql('CREATE TABLE IF NOT EXISTS COMBO_VALUE (ID_COMBO_VALUE INTEGER,ID_COMBO_CATEGORY INTEGER, NM_LABEL TEXT,NM_VALUE INTEGER, PRIMARY KEY (ID_COMBO_VALUE))', []);
        db.executeSql('CREATE TABLE IF NOT EXISTS ETYPE_CONFIG_ATTRIBUTE (ID_ATTRIBUTE INTEGER, ID_ELEMENT_TYPE_CONFIG INTEGER, ID_ATTRIBUTE_TYPE INTEGER, ID_COMBO_CATEGORY INTEGER,FG_MANDATORY INTEGER, PRIMARY KEY(ID_ATTRIBUTE,ID_ELEMENT_TYPE_CONFIG) )', []);
        db.executeSql('CREATE TABLE IF NOT EXISTS WORKITEM_ELEMENT (ID_WORK_ITEM_ELEMENT INTEGER, ID_ELEMENT INTEGER, ID_CASE INTEGER,ID_ELEMENT_TYPE_CONFIG INTEGER, ID_WORK_ITEM_STATUS INTEGER,ID_PARENT INTEGER,NR_ORDER INTEGER,NR_SEQUENCIAL INTEGER,NM_WORKITEM_TEMPLATE TEXT,NM_WORKITEM_STATUS TEXT,DE_CANCEL TEXT, DE_NOTES TEXT, PRIMARY KEY(ID_WORK_ITEM_ELEMENT) )', []);
        db.executeSql('CREATE TABLE IF NOT EXISTS WI_ELEMENT_DOC_STRUCTURE (ID_WORK_ITEM_ELEMENT INTEGER, ID_ELEMENT_TYPE_CONFIG INTEGER, VL_DOCUMENT_STRUCTURE CLOB, PRIMARY KEY(ID_WORK_ITEM_ELEMENT,ID_ELEMENT_TYPE_CONFIG) )', []);
        db.executeSql('CREATE TABLE IF NOT EXISTS PROJECT_SUBPROJECT ( ID_PROJECT_OF INTEGER, ID_ELEMENT_PROJECT_OF INTEGER, ID_ELEMENT_STATUS_PROJECT_OF INTEGER, ID_SUBPROJECT INTEGER, ID_ELEMENT_SUBPROJECT INTEGER, ID_ELEMENT_STATUS_SUBPROJECT INTEGER, NM_PROJECT_OF TEXT, NM_SUBPROJECT TEXT, PRIMARY KEY(ID_PROJECT_OF,ID_SUBPROJECT) )', []);
        db.executeSql('CREATE TABLE IF NOT EXISTS WI_ELEMENT_ATTRIBUTE (ID_WI_ELEMENT_ATTRIBUTE INTEGER, ID_ATTRIBUTE INTEGER, VL_ATTRIBUTE TEXT, ID_WORK_ITEM_ELEMENT INTEGER,FG_SYNCED INTEGER, PRIMARY KEY(ID_ATTRIBUTE,ID_WORK_ITEM_ELEMENT) )', []);
    }

    public createDatabase(){
      this.sqlite.create({
        name: 'tracker-mobile.db',
        location: 'default' // the location field is required
      })
      .then((db) => {
         this.initTables(db);
        console.log(db);
      })
      .catch(error =>{
        console.error(error);
      });
    }

    public removeDatabase(){
      this.sqlite.deleteDatabase(DB_CONFIG).then(()=>{
        console.log("DB removed");
      })
      .catch(error =>{
        console.error("Error removing db:"+error);
      });
    }



}
